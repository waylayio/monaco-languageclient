"""
This type stub file was generated by pyright.
"""

import abc
import httpx
from datetime import datetime
from enum import Enum
from dataclasses import dataclass
from typing import Any, Callable, ClassVar, Dict, Generator, List, Optional

"""Utilities to handle waylay authentication."""
_http = httpx
class CredentialsType(str, Enum):
    """Supported Waylay Authentication Methods.

    Note that username/password authentication (as used in our IDP at https://login.waylay.io)
    is not (yet) supported.
    """
    CLIENT = ...
    APPLICATION = ...
    TOKEN = ...
    CALLBACK = ...
    def __str__(self) -> str:
        """Get the string representation."""
        ...
    


DEFAULT_GATEWAY_URL = ...
DEFAULT_ACCOUNTS_URL = ...
ACCOUNTS_USERS_ME_PATH = ...
TokenString = str
class WaylayCredentials(abc.ABC):
    """Base class for the representation of credentials to the waylay platform."""
    gateway_url: Optional[str] = ...
    credentials_type: ClassVar[CredentialsType] = ...
    accounts_url: Optional[str] = ...
    @abc.abstractmethod
    def to_dict(self, obfuscate=...) -> Dict[str, Any]:
        """Convert the credentials to a json-serialisable representation."""
        ...
    
    @abc.abstractproperty
    def id(self) -> Optional[str]:
        """Get the main identifier for this credential."""
        ...
    
    def __repr__(self): # -> str:
        """Show the implementing class and public information."""
        ...
    
    def __str__(self) -> str:
        """Show the credential attributes, with secrets obfuscated."""
        ...
    
    @abc.abstractmethod
    def is_well_formed(self) -> bool:
        """Validate that these credentials are well-formed.

        This does not assure that they will lead to a succesfull authentication.
        """
        ...
    


CredentialsCallback = Callable[[Optional[str]], WaylayCredentials]
@dataclass(repr=False)
class AccountsUrlMixin:
    """Dataclass mixin for the 'gateway_url' (legacy 'accounts_url') property."""
    gateway_url: Optional[str] = ...
    accounts_url: Optional[str] = ...


@dataclass(repr=False, init=False)
class ApiKeySecretMixin(AccountsUrlMixin):
    """Dataclass mixin for the 'api_key' and 'api_secret'."""
    api_key: str = ...
    api_secret: str = ...
    def __init__(self, api_key: str, api_secret: str, *, gateway_url: Optional[str] = ..., accounts_url: Optional[str] = ...) -> None:
        """Initialise with the api_key and api_secret."""
        ...
    
    @property
    def id(self) -> Optional[str]:
        """Get the main identifier for this credential."""
        ...
    
    @classmethod
    def create(cls, api_key: str, api_secret: str, *, gateway_url: Optional[str] = ..., accounts_url: Optional[str] = ...): # -> Self:
        """Create a client credentials object."""
        ...
    
    def to_dict(self, obfuscate=...): # -> dict[str, str | None]:
        """Convert the credentials to a json-serialisable representation."""
        ...
    
    def is_well_formed(self) -> bool:
        """Validate that these credentials are well-formed.

        This does not assure that they will lead to a succesfull authentication.
        """
        ...
    


@dataclass(repr=False, init=False)
class NoCredentials(AccountsUrlMixin, WaylayCredentials):
    """Represents that credentials can be asked via (interactive) callback when required."""
    credentials_type: ClassVar[CredentialsType] = ...
    def to_dict(self, obfuscate=...): # -> dict[str, str | None]:
        """Convert the credentials to a json-serialisable representation."""
        ...
    
    def is_well_formed(self) -> bool:
        """Validate that these credentials are well-formed."""
        ...
    
    @property
    def id(self) -> Optional[str]:
        """Get the main identifier for this credential."""
        ...
    


@dataclass(repr=False, init=False)
class ClientCredentials(ApiKeySecretMixin, WaylayCredentials):
    """Waylay Credentials: api key and secret of type 'client_credentials'."""
    credentials_type: ClassVar[CredentialsType] = ...


@dataclass(repr=False, init=False)
class ApplicationCredentials(ApiKeySecretMixin, WaylayCredentials):
    """Waylay Credentials: api key and secret of type 'application_credentials'."""
    credentials_type: ClassVar[CredentialsType] = ...
    tenant_id: str = ...


@dataclass(repr=False, init=False)
class TokenCredentials(AccountsUrlMixin, WaylayCredentials):
    """Waylay JWT Token credentials."""
    credentials_type: ClassVar[CredentialsType] = ...
    token: TokenString = ...
    def __init__(self, token: TokenString, *, gateway_url: Optional[str] = ..., accounts_url: Optional[str] = ...) -> None:
        """Create a TokenCredentials from a token string."""
        ...
    
    @property
    def id(self) -> Optional[str]:
        """Get the main identifier for this credential."""
        ...
    
    def to_dict(self, obfuscate=...): # -> dict[str, str | None]:
        """Get the credential attributes."""
        ...
    
    def is_well_formed(self) -> bool:
        """Validate that these credentials are well-formed."""
        ...
    


class WaylayToken:
    """Holds a Waylay JWT token."""
    def __init__(self, token_string: str, token_data: Optional[Dict] = ...) -> None:
        """Create a Waylay Token holder object from given token string or data."""
        ...
    
    def validate(self) -> WaylayToken:
        """Verify essential assertions, and its expiry state.

        This implementation does not verify the signature of a token,
        as this is seen the responsability of a server implementation.
        """
        ...
    
    @property
    def tenant(self) -> Optional[str]:
        """Get the tenant id asserted by the token."""
        ...
    
    @property
    def domain(self) -> Optional[str]:
        """Get the waylay domain asserted by the token."""
        ...
    
    @property
    def subject(self) -> Optional[str]:
        """Get the subject asserted by the token."""
        ...
    
    @property
    def licenses(self) -> List[str]:
        """Get the licenses asserted by the token."""
        ...
    
    @property
    def groups(self) -> List[str]:
        """Get the groups asserted by the token."""
        ...
    
    @property
    def permissions(self) -> List[str]:
        """Get the permissions asserted by the token."""
        ...
    
    @property
    def expires_at(self) -> Optional[datetime]:
        """Get the token expiry timestamp."""
        ...
    
    @property
    def issued_at(self) -> Optional[datetime]:
        """Get the token issuance timestamp."""
        ...
    
    @property
    def expires_seconds(self) -> int:
        """Get seconds until expiry."""
        ...
    
    @property
    def age(self) -> int:
        """Get seconds sinds issuance."""
        ...
    
    @property
    def is_expired(self) -> bool:
        """Get the expiration state.

        True if a (previously valid) the token has expired.
        """
        ...
    
    @property
    def is_valid(self) -> bool:
        """Get the token validity.

        True if essential token data is present and is not expired.
        """
        ...
    
    def to_dict(self): # -> dict[str, str | bool | None]:
        """Get the main token attributes."""
        ...
    
    def __repr__(self) -> str:
        """Show the implementing class an main attributes."""
        ...
    
    def __str__(self) -> str:
        """Render the token string."""
        ...
    
    def __bool__(self) -> bool:
        """Get the validity of the token."""
        ...
    


class WaylayTokenAuth(_http.Auth):
    """Authentication flow with a waylay token.

    Will automatically refresh an expired token.
    """
    current_token: Optional[WaylayToken]
    credentials: WaylayCredentials
    def __init__(self, credentials: WaylayCredentials, initial_token: Optional[TokenString] = ..., credentials_callback: Optional[CredentialsCallback] = ...) -> None:
        """Create a Waylay Token authentication provider."""
        ...
    
    def auth_flow(self, request: _http.Request) -> Generator[_http.Request, _http.Response, None]:
        """Authenticate a http request.

        Implements the authentication callback for the http client.
        """
        ...
    
    def assure_valid_token(self) -> WaylayToken:
        """Validate the current token and request a new one if invalid."""
        ...
    


_AUTH_MESSAGE_FOR_EXCEPTON_CLASS = ...
def parse_credentials(json_obj: Dict[str, Any]) -> WaylayCredentials:
    """Convert a parsed json representation to a WaylayCredentials object."""
    ...

