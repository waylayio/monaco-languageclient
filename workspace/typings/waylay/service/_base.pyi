"""
This type stub file was generated by pyright.
"""

from typing import Any, Callable, Collection, Dict, List, Mapping, Optional, Protocol, Type, TypeVar, Union
from simple_rest_client.api import API, Resource
from waylay.config import WaylayConfig

"""Base classes for Waylay REST Services and Resources."""
__docformat__ = ...
S = TypeVar('S', bound='WaylayService')
RS = TypeVar('RS', bound='WaylayRESTService')
R = TypeVar('R', bound='WaylayResource')
class WaylayServiceContext(Protocol):
    """View protocol for the dynamic service context."""
    def get(self, service_class: Type[S]) -> Optional[S]:
        """Get the service instance for the given class, if available."""
        ...
    
    def require(self, service_class: Type[S]) -> S:
        """Get the service instances for the given class or raise a ConfigError."""
        ...
    
    def list(self) -> List[WaylayService]:
        """List all available service instances."""
        ...
    


DEFAULT_SERVICE_TIMEOUT = ...
class WaylayAction(dict):
    """Configuration object for a service action."""
    @property
    def resource(self) -> WaylayResource:
        """Get the parent resource of this action."""
        ...
    
    @property
    def id(self) -> str:
        """Get the action id."""
        ...
    
    @property
    def name(self) -> str:
        """Get the action name as exposed in the SDK."""
        ...
    
    @property
    def description(self) -> Optional[str]:
        """Get the action description."""
        ...
    
    @property
    def arguments(self) -> List[Dict]:
        """Get the arguments documentation info."""
        ...
    
    @property
    def returns(self) -> List[Dict]:
        """Get the returns documentation info."""
        ...
    
    @property
    def doc_links(self) -> Dict[str, Dict[str, str]]:
        """Get (documentation) links templates."""
        ...
    
    @property
    def rest_action_doc(self) -> str:
        """Get the documentation string for the REST action."""
        ...
    
    @property
    def action_method(self) -> Callable:
        """Get the SDK action method that is used to expose this action."""
        ...
    
    @property
    def sdk_action_method(self) -> Callable:
        """Get the REST action method that is used to expose this action."""
        ...
    
    @property
    def sdk_action_doc(self) -> str:
        """Get the sdk python documentation for this action."""
        ...
    
    @property
    def arguments_doc(self) -> str:
        """Get the argument documentation for this action."""
        ...
    
    @property
    def returns_doc(self) -> str:
        """Get the return value documentation for this action."""
        ...
    
    def __repr__(self): # -> str:
        """Get a string representation of this action."""
        ...
    
    def as_dict(self): # -> dict[str, Any]:
        """Get a dictionary representation."""
        ...
    
    @property
    def fqn(self): # -> str:
        """Get the fully qualified name for this action."""
        ...
    


class WaylayRESTAction(WaylayAction):
    """Configuration object representing a single Waylay REST action."""
    @property
    def method(self) -> Optional[str]:
        """Get the action HTTP method."""
        ...
    
    @property
    def url(self) -> Optional[str]:
        """Get the action url template."""
        ...
    
    def __repr__(self): # -> str:
        """Get a string representation of this REST action."""
        ...
    
    @property
    def rest_action_doc(self) -> str:
        """Get the documentation string for the REST action."""
        ...
    
    def as_dict(self): # -> dict[str, Any]:
        """Get a dictionary representation."""
        ...
    


class WaylayRESTActionsWrapper(WaylayAction):
    """Configuration object representing a method that wraps one or more REST actions."""
    @property
    def wrapped_actions(self) -> List[WaylayRESTAction]:
        """Get the list of wrapped REST actions as defined by 'wrapped_actions'."""
        ...
    
    @property
    def doc_links(self) -> Dict[str, Dict[str, str]]:
        """Get (documentation) links templates."""
        ...
    


def create_waylay_action(**kwargs) -> WaylayAction:
    """Initialize a waylay action that wraps a REST call or other method."""
    ...

class WaylayResource(Resource):
    """Client object representing a Waylay REST Resource.

    This is a collection of REST operations that have a single Waylay Entity as subject.
    """
    service: WaylayService
    resource_name: str
    actions: Dict[str, Union[WaylayAction, Collection[Any]]]
    link_roots: Dict[str, str] = ...
    def __init__(self, *args, **kwargs) -> None:
        """Create a Waylay Resource."""
        ...
    
    @property
    def name(self): # -> str:
        """Get the name that identifies this resource in the Python SDK."""
        ...
    
    @property
    def description(self): # -> str | None:
        """Get a description of this service."""
        ...
    
    def add_action(self, action_name: str): # -> None:
        """Add action, and apply decorators."""
        ...
    
    def decorate_action(self, action_name): # -> None:
        """Decorate the action if a 'decorators' definition exist."""
        ...
    
    def __repr__(self): # -> str:
        """Get a technical string representation of this action."""
        ...
    
    def as_dict(self): # -> dict[str, Any]:
        """Get a dictionary representation."""
        ...
    
    @property
    def hal_roots(self) -> Dict[str, str]:
        """Get the root urls for documentation links if this resource."""
        ...
    
    def doc_links(self, action: Optional[str]) -> Dict[str, Dict[str, str]]:
        """Create a HAL `_links` representation for (documentation) links.

        Arguments:
            action      if specified, give links for a specific action rather than the resource.
        """
        ...
    
    def get_action_full_url(self, action_name, *parts):
        """Override the regular url computation when not using api gateway."""
        ...
    
    @property
    def fqn(self): # -> str:
        """Get the fully qualified name for this resource."""
        ...
    


class WaylayService:
    """Client object representing a Waylay Tool."""
    resource_definitions: Mapping[str, Type[Resource]]
    config: WaylayConfig
    service_key: str = ...
    plugin_priority = ...
    gateway_root_path: Optional[str] = ...
    _resources: Dict[str, WaylayResource]
    def __init__(self, *args, **kwargs) -> None:
        """Create a WaylayRESTService."""
        ...
    
    @property
    def name(self): # -> str:
        """Get the name that identifies this service in the Python SDK."""
        ...
    
    @property
    def description(self): # -> str | None:
        """Get a description of this service."""
        ...
    
    @property
    def root_url(self) -> Optional[str]:
        """Get the root url."""
        ...
    
    @property
    def resources(self): # -> List[WaylayResource]:
        """Get the resources supported by this service."""
        ...
    
    def list_resources(self) -> List[WaylayResource]:
        """List the WaylayResources of this service."""
        ...
    
    def configure(self: S, config: WaylayConfig, context: WaylayServiceContext) -> S:
        """Configure endpoints and authentication with given configuration.

        Returns self
        """
        ...
    
    def reconfigure(self: S) -> S:
        """Configure endpoints and authentication with current configuration.

        Returns self
        """
        ...
    
    def get_root_url(self) -> Optional[str]:
        """Get the root url."""
        ...
    
    def __repr__(self): # -> str:
        """Get a technical string representation of this tool."""
        ...
    
    @property
    def fqn(self): # -> str:
        """Get the fully qualified name for this service."""
        ...
    


class WaylayRESTService(API, WaylayService):
    """Client object representing a Waylay Service.

    A collection of Resources with their operations.
    """
    config_key: str = ...
    default_root_path: str = ...
    link_templates: Dict[str, str] = ...
    def __init__(self, *args, **kwargs) -> None:
        """Create a WaylayRESTService."""
        ...
    
    def set_root_url(self, root_url): # -> None:
        """Set the root url and reconfigure the service."""
        ...
    
    def get_root_url(self) -> Optional[str]:
        """Get the root url."""
        ...
    
    def reconfigure(self: RS) -> RS:
        """Configure endpoints and authentication with current configuration.

        Returns self
        """
        ...
    
    def __repr__(self): # -> str:
        """Get a technical string representation of this service."""
        ...
    
    def doc_links(self) -> Dict[str, Dict[str, str]]:
        """Create a HAL `_links` representation for the documentation links."""
        ...
    


