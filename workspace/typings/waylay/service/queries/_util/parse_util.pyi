"""
This type stub file was generated by pyright.
"""

import pandas as pd
import pandas.tseries.frequencies as pd_freq
from typing import Any, Dict, Optional

"""Utilitly package for working with Pandas dataframes."""
__docformat__ = ...
KEY_DEFAULT = ...
@pd.api.extensions.register_index_accessor("tsa")
class TsaIndexMetaAccessor:
    """Accessor added under the 'tsa' namespace to Indexes.

    Attaches additional timeseries functionality.
    A 'freq' property is added which will be taken from the index if available
    """
    def __init__(self, index) -> None:
        """Create the accessor."""
        ...
    
    @property
    def iso_freqstr(self) -> Optional[str]:
        """Get the ISO-8601 frequency string for the DataFrame's index.

        None if there is no frequency.
        """
        ...
    
    @property
    def pandas_freqstr(self) -> Optional[str]:
        """Get the pandas frequency string for the DataFrame's index.

        None if there is no frequency.
        """
        ...
    
    @property
    def pandas_freq(self) -> Optional[pd_freq.DateOffset]:
        """Get the pandas frequency object for the DataFrame's index.

        None if there is no frequency.
        """
        ...
    
    @property
    def window_length(self) -> Optional[pd.Timedelta]:
        """Get window length of this data series.

        If a frequency is present, this is the
        length of the half-open interval that extends
        1 freq unit after the last datapoint.
        """
        ...
    
    @property
    def until(self) -> Optional[pd.Timestamp]:
        """Get the `until` specification of this index."""
        ...
    
    @property
    def window_spec(self) -> Optional[Dict]:
        """Create the window specification that can be inferred."""
        ...
    


@pd.api.extensions.register_series_accessor("tsa")
class TsaSeriesMetaAccessor:
    """Accessor added under the 'tsa' namespace to Series.

    Attaches additional timeseries functionality.
    """
    def __init__(self, series: pd.Series) -> None:
        """Create a TsaSeriesMetaAccessor."""
        ...
    
    @property
    def table_attributes(self) -> Dict:
        """Get additional attributes on table level.

        E.g. column metadata that is the same for each column.
        """
        ...
    
    @property
    def iso_freqstr(self) -> Optional[str]:
        """Get the ISO-8601 frequency string for the DataFrame's index.

        None if there is no frequency.
        """
        ...
    
    @property
    def pandas_freqstr(self) -> Optional[str]:
        """Get the pandas frequency string for the DataFrame's index.

        None if there is no frequency.
        """
        ...
    
    @property
    def pandas_freq(self) -> Optional[pd_freq.DateOffset]:
        """Get the pandas frequency object for the DataFrame's index.

        None if there is no frequency.
        """
        ...
    
    @property
    def window_length(self) -> Optional[pd.Timedelta]:
        """Get window length of this data series."""
        ...
    
    @property
    def until(self) -> Optional[pd.Timestamp]:
        """Get the `until` specification of this Series."""
        ...
    
    @property
    def window_spec(self) -> Dict:
        """Get the window specification of this Series."""
        ...
    


@pd.api.extensions.register_dataframe_accessor("tsa")
class TsaDataframeMetaAccessor:
    """TSA accessor added under the 'tsa' namespace to Dataframes.

    Attaches additional timeseries functionality.
    """
    def __init__(self, df) -> None:
        """Create a TsaDataframeMetaAccessor."""
        ...
    
    @property
    def table_attributes(self): # -> OrderedDict[Any, Any]:
        """Additional attributes on table level.

        e.g. column metadata that is the same for each column.
        """
        ...
    
    @property
    def iso_freqstr(self) -> Optional[str]:
        """Get the ISO-8601 frequency string for the DataFrame's index.

        None if there is no frequency.
        """
        ...
    
    @property
    def pandas_freqstr(self) -> Optional[str]:
        """Get the pandas frequency string for the DataFrame's index.

        None if there is no frequency.
        """
        ...
    
    @property
    def pandas_freq(self) -> Optional[pd_freq.DateOffset]:
        """Get the pandas frequency object for the DataFrame's index.

        None if there is no frequency.
        """
        ...
    
    @property
    def window_length(self) -> Optional[str]:
        """Get window length of this DataFrame as an iso 8601 period string."""
        ...
    
    @property
    def until(self):
        """Get the `until` specification of this DataFrame."""
        ...
    
    @property
    def window_spec(self):
        """Get the window_spec specification of this DataFrame."""
        ...
    


def to_pandas_freq(freq: Any) -> pd_freq.DateOffset:
    """Convert a frequency or interval to a pandas DateOffset."""
    ...

def to_pandas_freqstr(freq: Any) -> Optional[str]:
    """Convert a frequency or interval to a pandas frequency string."""
    ...

ISO_PERIOD_FORMAT_BY_PANDAS_UNIT = ...
def to_iso_freq(freq, lsnr=...) -> Optional[str]:
    """Convert a frequency or interval to an ISO-8601 Duration."""
    ...

