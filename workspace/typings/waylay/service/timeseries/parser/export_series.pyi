"""
This type stub file was generated by pyright.
"""

import collections.abc
from os import PathLike
from tarfile import TarFile
from typing import Iterable, Optional, Tuple, Union
from zipfile import ZipFile
from waylay.service.data.series import SeriesResource
from .model import ArchiveType, CSVOutput, CSVWriteable, Measurement, SeriesProvider, SeriesSettings

"""Module that implements export readers for waylay timeseries data."""
LOG = ...
DEFAULT_EXPORT_PAGE_SIZE = ...
DEFAULT_SPOOL_MAX_SIZE = ...
TS_FORMAT_MILLIS = ...
def create_export_series_provider(settings: SeriesSettings, series_api: SeriesResource) -> SeriesProvider:
    """Create a series provider from the waylay api for the given settings."""
    ...

class PagingExportSeriesProvider(collections.abc.Mapping):
    """A series provider that uses paging exports from the waylay series api."""
    def __init__(self, settings: SeriesSettings, series_api: SeriesResource) -> None:
        """Create an export series provider."""
        ...
    
    def __iter__(self): # -> Iterator[tuple[str, str]]:
        """Iterate over the (resource, metric) keys of this provider."""
        ...
    
    def __len__(self): # -> int:
        """Get the number of requested (resource,metric) combinations."""
        ...
    
    def __getitem__(self, resource_metric: Tuple[str, str]) -> Iterable[Measurement]:
        """Create an measurement iterable for a given resource, metric."""
        class _MeasurementIterable:
            ...
        
        
    


ARCHIVE_DEFAULT_EXTENSIONS = ...
def export_csv(output: CSVOutput, settings: SeriesSettings, series: SeriesProvider, archive_type: Optional[ArchiveType] = ..., progress: bool = ...): # -> None:
    """Export a series iterator to a CSV file or archive."""
    ...

def export_csv_to_dir(csv_dir: Union[str, PathLike], settings: SeriesSettings, series: SeriesProvider, compress: bool = ...): # -> None:
    """Export a series provider to a directory csv files."""
    ...

def export_csv_to_zip_archive(zip_file: ZipFile, settings: SeriesSettings, series: SeriesProvider): # -> None:
    """Export a series provider to a zip archive of csv files."""
    ...

def export_csv_to_tar_archive(tar_file: TarFile, settings: SeriesSettings, series: SeriesProvider): # -> None:
    """Export a series provider to a tar archive of csv files per resource."""
    ...

def export_csv_to_file(output: CSVWriteable, settings: SeriesSettings, series_provider: SeriesProvider): # -> None:
    """Export a series provider to a CSV output stream according to the settings."""
    ...

